<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
	<channel>
	<title>The Blog of Zachary Snow</title>
	<description>The Blog of Zachary Snow</description>
	<link>http://smack0007.github.io/</link>
	<lastBuildDate>Mon, 28 May 2018 08:22:53 GMT</lastBuildDate>
	<pubDate>Fri, 25 May 2018 00:00:00 GMT</pubDate>
	<ttl>1800</ttl>
	<item>
		<title><![CDATA[A neat way to curry in C#]]></title>
		<description><![CDATA[<p>I was reading an older blogpost from <a href="http://mikehadlow.blogspot.de/2015/09/partial-application-in-c.html">Mike Hadlow</a> about
<a href="http://mikehadlow.blogspot.de/2015/09/partial-application-in-c.html">Partial Application in C#</a> in which he discusses how
<a href="https://en.wikipedia.org/wiki/Partial_application">Partial Application</a> can be implemented in C# via
<a href="https://en.wikipedia.org/wiki/Currying">Currying</a>. Although I appreciate his example of implementing currying via extsion
methods, the syntax is hideous. There is a suggestion in the comments though that I found to be a much better solution.</p>
<pre><code class="language-c#"><span class="comment">// Define a local function Add.</span>
<span class="keyword">int</span> Add(<span class="keyword">int</span> a, <span class="keyword">int</span> b) =&gt; a + b;

<span class="comment">// Here we do the currying.</span>
Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; add3 = (b) =&gt; Add(<span class="number">3</span>, b);

<span class="comment">// This will print 5.</span>
Console.WriteLine(add3(<span class="number">2</span>));

<span class="comment">// Curry one more time so that we have</span>
<span class="comment">// a function that simply produces 5.</span>
Func&lt;<span class="keyword">int</span>&gt; five = () =&gt; add3(<span class="number">2</span>);

<span class="comment">// This will also print 5.</span>
Console.WriteLine(five());</pre></code>
]]></description>
		<link>http://smack0007.github.io/blog/2018/a-neat-way-to-curry-in-csharp.html</link>
		<guid>http://smack0007.github.io/blog/2018/a-neat-way-to-curry-in-csharp.html</guid>
		<pubDate>Fri, 25 May 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Lambda Collection Wrappers]]></title>
		<description><![CDATA[<p>I've been reading a lot as of late about functional programming and I try to
incorperate as much as possible into my everyday programming. One trick that
I've definitely started using is wrapping collections in lambda functions.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/lambda-collection-wrappers.html</link>
		<guid>http://smack0007.github.io/blog/2018/lambda-collection-wrappers.html</guid>
		<pubDate>Thu, 26 Apr 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[string.Join Extension Method]]></title>
		<description><![CDATA[<p>Normally if want to do a <code>string.Join</code> on the result of a Linq query you end up with somthing looking like
this:</p>
<pre><code class="language-csharp">Console.WriteLine(<span class="keyword">string</span>.Join(<span class="string">&quot;, &quot;</span>, numbers.Where(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>)));</pre></code>
<p>The call to <code>string.Join</code> has to come first and then the Linq query. I've always felt this breaks the flow
of the code and would be easier to read if the <code>string.Join</code> was at the end of the Linq query:</p>
<pre><code class="language-csharp">Console.WriteLine(numbers.Where(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>).JoinString(<span class="string">&quot;, &quot;</span>));</pre></code>
<p>This can be implemented with the following extension methods:</p>
<pre><code class="language-csharp"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> JoinStringExtensions
{
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> JoinString&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; source, <span class="keyword">string</span> seperator) =&gt;
        <span class="keyword">string</span>.Join(seperator, source.Select(x =&gt; x.ToString()));

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> JoinString(<span class="keyword">this</span> IEnumerable&lt;<span class="keyword">string</span>&gt; source, <span class="keyword">string</span> seperator) =&gt;
        <span class="keyword">string</span>.Join(seperator, source);
}</pre></code>
<p>The specialization for <code>IEnumerable&lt;string&gt;</code> is just mirroring the implementation from <code>string.Join</code>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/string-join-extension-method.html</link>
		<guid>http://smack0007.github.io/blog/2018/string-join-extension-method.html</guid>
		<pubDate>Thu, 19 Apr 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Run a program directly after building in VS Code]]></title>
		<description><![CDATA[<p>Whenever I have a program that is just a generator of some kind I like to have that
program execute directly after having built the program successfully. I'm going to show
how to run the program via the dotnet cli but this trick can easily be applied to regular
.NET programs or any program which is built using MSBuild.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/run-program-directly-after-building-vscode.html</link>
		<guid>http://smack0007.github.io/blog/2018/run-program-directly-after-building-vscode.html</guid>
		<pubDate>Wed, 11 Apr 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Merging Build.Directory.props]]></title>
		<description><![CDATA[<p>MSBuild version 15 introduced the concept of &quot;Directory.Build.props&quot; files. From the docs:</p>
<ul>
<li><code>Directory.Build.props</code> is a user-defined file that provides customizations to projects under a directory. This
file is automatically imported from Microsoft.Common.props unless the property <code>ImportDirectoryBuildTargets</code> is
set to false.</li>
</ul>
<p>What is not stated here is that only one <code>Directory.Build.props</code> will be imported automatically. Imagine your project
exists in the directory <code>C:\repo\src\foo\foo.csproj</code> and there exists a file in both <code>C:\repo\src\Directory.Build.props</code> and
<code>C:\repo\Directory.Build.props</code> then only <code>C:\repo\src\Directory.Build.props</code> will be automatically included when building
<code>C:\repo\src\foo\foo.csproj</code>. If you would like <code>C:\repo\Directory.Build.props</code> to be included as well, then
<code>C:\repo\src\Directory.Build.props</code> will have to include <code>C:\repo\Directory.Build.props</code> like so:</p>
<pre><code class="language-xml"><span class="xmlDelimiter">&lt;</span><span class="xmlName">Project</span><span class="xmlDelimiter">&gt;</span>
    <span class="xmlDelimiter">&lt;</span><span class="xmlName">Import</span> <span class="xmlAttribute">Project</span><span class="xmlDelimiter">=</span><span class="xmlAttributeQuotes">&quot;</span><span class="xmlAttributeValue">$([MSBuild]::GetPathOfFileAbove(&#39;Directory.Build.props&#39;, &#39;$(MSBuildThisFileDirectory)../&#39;))</span><span class="xmlAttributeQuotes">&quot;</span> <span class="xmlDelimiter">/&gt;</span>
<span class="xmlDelimiter">&lt;/</span><span class="xmlName">Project</span><span class="xmlDelimiter">&gt;</span></pre></code>
<p>This is documented <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build#use-case-multi-level-merging">here</a>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/merging-build-directory-props.html</link>
		<guid>http://smack0007.github.io/blog/2018/merging-build-directory-props.html</guid>
		<pubDate>Wed, 04 Apr 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Git Quick Push]]></title>
		<description><![CDATA[<p>Here's a quick one liner to quickly stage all your changes in the current git repo, commit them and then push
the commit to origin master branch.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/git-quick-push.html</link>
		<guid>http://smack0007.github.io/blog/2018/git-quick-push.html</guid>
		<pubDate>Thu, 29 Mar 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Poor Man's Template Engine in C# Part 3]]></title>
		<description><![CDATA[<p>In our <a href="blog/2018/poor-mans-template-engine-2.html">last episode</a> we implemeted the first
two helper funcitons <code>HtmlEncode</code> and <code>If</code>. Today we want to implement <code>Include</code>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/poor-mans-template-engine-3.html</link>
		<guid>http://smack0007.github.io/blog/2018/poor-mans-template-engine-3.html</guid>
		<pubDate>Thu, 22 Mar 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Poor Man's Template Engine in C# Part 2]]></title>
		<description><![CDATA[<p>In our <a href="blog/2018/poor-mans-template-engine-1.html">last episode</a> we laid the groundwork for our
simple template engine. In this episode we'll introduce our first 2 helper functions.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/poor-mans-template-engine-2.html</link>
		<guid>http://smack0007.github.io/blog/2018/poor-mans-template-engine-2.html</guid>
		<pubDate>Wed, 14 Mar 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Poor Man's Template Engine in C# Part 1]]></title>
		<description><![CDATA[<p>If you're looking for a poor man's solution to a templating engine for .net and don't really need
the overhead a complete template engine brings with it, I've come up with the following solution.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/poor-mans-template-engine-1.html</link>
		<guid>http://smack0007.github.io/blog/2018/poor-mans-template-engine-1.html</guid>
		<pubDate>Tue, 06 Mar 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Snowball V2.0]]></title>
		<description><![CDATA[<p>I haven't written anything new here in a very long time and a lot has happened since then. I started a new job at
<a href="https://www.beumergroup.com">BeumerGroup</a> this year and now work mostly in TypeScript writing an html5 spa app.</p>
<p>In my spare time I've decided to working on version 2.0 of my <a href="https://github.com/smack0007/Snowball">Snowball</a>,
my 2D game framework. I've been playing around with the idea for a while now. This version will be developed directly
for .net core and will be developed with cross platform capability in mind. The api will look similar but will have
some changes.</p>
<p>The old repo is still available on my <a href="https://github.com/smack0007/">github</a> at <a href="https://github.com/smack0007/Snowball_v1">https://github.com/smack0007/Snowball_v1</a>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/snowball-2.html</link>
		<guid>http://smack0007.github.io/blog/2018/snowball-2.html</guid>
		<pubDate>Fri, 23 Feb 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Using batch files as the task runner in Visual Studio Code]]></title>
		<description><![CDATA[<p><a href="https://code.visualstudio.com/">Visual Studio Code</a> allows you specify tasks which can be in a task runner. Most examples
I've seen show how to integrate with Javascript task runners such as Gulp. There is no reason why you can't simpley use
batch files though.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2015/using-batch-files-as-task-runner-vs-code.html</link>
		<guid>http://smack0007.github.io/blog/2015/using-batch-files-as-task-runner-vs-code.html</guid>
		<pubDate>Thu, 09 Jul 2015 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[LINQ calls IEqualityComparer<T>.GetHashCode() before Equals()]]></title>
		<description><![CDATA[<p>This is a problem that has bitten me more than a few times so I thought it was about time to write a blog post about it. It's one of those problems
that makes you scratch your head for a bit and then the light bulb goes on and you remember you've solved this one before. It occurs whenever you
use a LINQ extension method which takes an instance of IEqualityComaparer<T>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2014/linq-calls-iequalitycomparer-gethashcode-before-equals.html</link>
		<guid>http://smack0007.github.io/blog/2014/linq-calls-iequalitycomparer-gethashcode-before-equals.html</guid>
		<pubDate>Mon, 24 Nov 2014 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[My Experience with OpenGL vs Direct3D]]></title>
		<description><![CDATA[<p>I've struggled a lot with myself over whether I should use OpenGL or Direct3D. There is no blanket answer to this question that anyone can tell you.
Both APIs have a very different feel and which one you prefer can only be decided on your own.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2014/my-experience-with-opengl-vs-direct3d.html</link>
		<guid>http://smack0007.github.io/blog/2014/my-experience-with-opengl-vs-direct3d.html</guid>
		<pubDate>Tue, 18 Nov 2014 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Code from when I was young and stupid and needed the money]]></title>
		<description><![CDATA[<p>We have had 2 interns at work for the past few weeks and one of the tasks we gave them was to implement <a href="http://en.wikipedia.org/wiki/Quick_sort">Quicksort</a>.
This got me to thinking about my youth and some of the code I wrote back then. I've decided to post it.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2014/code-from-when-i-was-young-and-stupid.html</link>
		<guid>http://smack0007.github.io/blog/2014/code-from-when-i-was-young-and-stupid.html</guid>
		<pubDate>Wed, 18 Jun 2014 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Adding assembly references in Roslyn]]></title>
		<description><![CDATA[<p>In the Roslyn preview that was released at Build 2014 the way references to global assmeblies are added was changed. Before the preview I could use code like this:</p>
<pre><code class="language-csharp"><span class="keyword">var</span> compilation = Compilation.Create(assemblyName, <span class="keyword">new</span> CompilationOptions(OutputKind.DynamicallyLinkedLibrary))
	.AddReferences(MetadataReference.CreateAssemblyReference(<span class="string">&quot;mscorlib&quot;</span>))
	.AddReferences(MetadataReference.CreateAssemblyReference(<span class="string">&quot;System&quot;</span>))
	.AddReferences(MetadataReference.CreateAssemblyReference(<span class="string">&quot;System.Core&quot;</span>))
	.AddReferences(<span class="keyword">new</span> MetadataFileReference(<span class="keyword">this</span>.GetType().Assembly.Location))
	.AddSyntaxTrees(syntaxTree);</pre></code>
<p>The static factory method &quot;MetadataReference.CreateAssemblyReference&quot; added a reference to global assemblies such as &quot;mscorlib.dll&quot; or &quot;System.dll&quot;. In the Roslyn preview,
the same be achieved like so:</p>
<pre><code class="language-csharp"><span class="keyword">var</span> assemblyPath = Path.GetDirectoryName(<span class="keyword">typeof</span>(<span class="keyword">object</span>).Assembly.Location);

<span class="keyword">var</span> compilation = CSharpCompilation.Create(assemblyName)
	.WithOptions(<span class="keyword">new</span> CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
	.AddReferences(<span class="keyword">new</span> MetadataFileReference(Path.Combine(assemblyPath, <span class="string">&quot;mscorlib.dll&quot;</span>)))
	.AddReferences(<span class="keyword">new</span> MetadataFileReference(Path.Combine(assemblyPath, <span class="string">&quot;System.dll&quot;</span>)))
	.AddReferences(<span class="keyword">new</span> MetadataFileReference(Path.Combine(assemblyPath, <span class="string">&quot;System.Core.dll&quot;</span>)))
	.AddReferences(<span class="keyword">new</span> MetadataFileReference(Assembly.GetEntryAssembly().Location))
	.AddSyntaxTrees(syntaxTree);</pre></code>
]]></description>
		<link>http://smack0007.github.io/blog/2014/adding-assembly-references-in-roslyn.html</link>
		<guid>http://smack0007.github.io/blog/2014/adding-assembly-references-in-roslyn.html</guid>
		<pubDate>Tue, 15 Apr 2014 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[All the cool kids are static]]></title>
		<description><![CDATA[<p>Seems like all the cool kids these days have converted their websites to completely static ones. I'm looking at you <a href="http://haacked.com">Mr. Haacked</a>. I thought this was a pretty cool idea and a chance
to really refresh my website so I decided to take a stab at it. It's currently a work in progress.</p>
<p>I ended up writing my own tool I call <a href="http://github.com/smack0007/Gatsby">Gatsby</a> to do it. I also set up the whole deploy process myself involving pushing to <a href="http://github.com/smack0007/zacharysnow.net">Github</a>
which then informs my website to pull from the Github repository. Hopefully that will be a blog post in the not too distance future.</p>
<p>Sorry for any inconvenience.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2014/all-the-cool-kids-are-static.html</link>
		<guid>http://smack0007.github.io/blog/2014/all-the-cool-kids-are-static.html</guid>
		<pubDate>Sun, 09 Mar 2014 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Using Component Glue to build your object graphs automatically]]></title>
		<description><![CDATA[<p>Component Glue is an IoC container and you use it of course to wire up your object graphs for you. Component Glue can also build your object graphs for you automatically if there are no interfaces involved. Take this example:</p>
<script src="https://gist.github.com/smack0007/6091538.js"></script>
<p>In After.cs, you can see that Component Glue is able to build the entire object graph for us. This will include all future dependencies as well so long as interfaces don't come into play. Should an interface be needed, you can just bind that single component.</p>
<p>This is a very powerful thing. If one component needs to take on a dependency, just ask for it in the constructor and Component Glue will handle it for you.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2013/using-component-glue-to-build-your-object-graphs-automatically.html</link>
		<guid>http://smack0007.github.io/blog/2013/using-component-glue-to-build-your-object-graphs-automatically.html</guid>
		<pubDate>Fri, 26 Jul 2013 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Component Glue v1.0]]></title>
		<description><![CDATA[<p>I finally brought Component Glue up to a state where I felt like the product was finished. You can get it via NuGet:</p>
<div class="nuget-badge">
`PM&gt; Install-Package ComponentGlue`
</div>
<p>or you can get the source from <a href="https://github.com/smack0007/ComponentGlue">GitHub</a>. The documentation is definitely sparse I know but I recommend taking a look at the unit tests to get a feel for what you can do with Component Glue.</p>
<p>Credit for the NuGet CSS <a href="http://www.arunrana.net/2012/01/design-of-nuget-package-installation.html">here</a>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2013/component-glue-v1-0.html</link>
		<guid>http://smack0007.github.io/blog/2013/component-glue-v1-0.html</guid>
		<pubDate>Tue, 11 Jun 2013 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[GLDotNet Version 0.6.0]]></title>
		<description><![CDATA[<p>I just released GLDotNet Version 0.6.0.</p>
<h2>Changelog:</h2>
<ul>
<li>**GLDotNet.Toolkit**: Assembly containing simple app framework.</li>
<li>**GLDotNet.Objects**: Assembly containing higher level objects such as Texture2D and VertexBuffer.</li>
<li>More overloads added to GLContext class.</li>
<li>byte and sbyte are now mapped correctly in generated code.</li>
<li>Fixed the naming of some functions so as not to include type notation, i.e. Color4u.</li>
<li>Decreased the number of enum values output.</li>
</ul>
]]></description>
		<link>http://smack0007.github.io/blog/2013/gldotnet-version-0-6-0.html</link>
		<guid>http://smack0007.github.io/blog/2013/gldotnet-version-0-6-0.html</guid>
		<pubDate>Tue, 19 Feb 2013 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Introducing GLDotNet]]></title>
		<description><![CDATA[<p>Today I released a project I've been playing around with for a year or so on Codeplex. It's called <a href="https://gldotnet.codeplex.com/">GLDotNet</a>. From the project description:</p>
<p><em>C# wrapper for OpenGL. Partially generated from the OpenGL spec and partially written by hand, the aim is to have a flexible and native feeling C# binding.</em></p>
<p>I have generated functions from the OpenGL spec excluding 1 or 2 but unfortunately of the generated code is untested. There is a demo project included in the source code. The Github repository is located here: <a href="https://github.com/smack0007/GLDotNet">https://github.com/smack0007/GLDotNet</a></p>
]]></description>
		<link>http://smack0007.github.io/blog/2013/introducing-gldotnet.html</link>
		<guid>http://smack0007.github.io/blog/2013/introducing-gldotnet.html</guid>
		<pubDate>Wed, 02 Jan 2013 00:00:00 GMT</pubDate>
	</item>
	</channel>
</rss>

