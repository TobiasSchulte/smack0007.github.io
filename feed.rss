<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
	<channel>
	<title>The Blog of Zachary Snow</title>
	<description>The Blog of Zachary Snow</description>
	<link>http://smack0007.github.io/</link>
	<lastBuildDate>Wed, 28 Mar 2018 08:01:34 GMT</lastBuildDate>
	<pubDate>Thu, 22 Mar 2018 00:00:00 GMT</pubDate>
	<ttl>1800</ttl>
	<item>
		<title><![CDATA[Poor Man's Template Engine in C# Part 3]]></title>
		<description><![CDATA[<p>In our <a href="blog/2018/poor-mans-template-engine-2.html">last episode</a> we implemeted the first
two helper funcitons <code>HtmlEncode</code> and <code>If</code>. Today we want to implement <code>Include</code>:</p>
<pre><code class="language-c#">
<span style="color:#0000FF;">namespace</span> Pmte
{
    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">delegate</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; Template&lt;TData&gt;(TData data);

    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">class</span> TemplateExtensions
    {   
        <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">string</span> Render(<span style="color:#0000FF;">this</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; templateResult) =&gt; <span style="color:#0000FF;">string</span>.Join(Environment.NewLine, templateResult);

        <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">string</span> HtmlEncode(<span style="color:#0000FF;">string</span> input) =&gt; WebUtility.HtmlEncode(input);

        <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">string</span> If(<span style="color:#0000FF;">bool</span> condition, <span style="color:#0000FF;">string</span> trueString, <span style="color:#0000FF;">string</span> falseString = <span style="color:#0000FF;">null</span>) =&gt; condition ? trueString : falseString;

        <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">string</span> Include&lt;TData&gt;(Template&lt;TData&gt; template, TData data) =&gt;
            template(data).Render();
    }
}

</pre></code>
<p>Include can be used by specifying the template function and the data used to call the template function. The rendered result is returned.</p>
<p>Example usage:</p>
<pre><code class="language-c#">
<span style="color:#0000FF;">using</span> <span style="color:#0000FF;">static</span> Pmte.TemplateExtensions;

<span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">class</span> Templates
{
    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; Post(PostData post)
    {
        <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> <span style="color:#A31515;">&quot;&lt;div class=\&quot;post\&quot;&gt;&quot;</span>;
            <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> Include(PostHeader, post);
            <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> <span style="color:#A31515;">&quot;&lt;div class=\&quot;content\&quot;&gt;&quot;</span>;
                <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> post.Content;
            <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> <span style="color:#A31515;">&quot;&lt;/div&gt;&quot;</span>;
        <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> <span style="color:#A31515;">&quot;&lt;/div&gt;&quot;</span>;
    }
    
    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; PostHeader(PostData post)
    {
        <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> $<span style="color:#A31515;">&quot;&lt;h2&gt;&lt;a href=\&quot;{post.Url}\&quot;&gt;{HtmlEncode(post.Title)}&lt;/a&gt;&lt;/h2&gt;&quot;</span>;   

        <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> <span style="color:#A31515;">&quot;&lt;div class=\&quot;meta\&quot;&gt;&quot;</span>;
            <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> $<span style="color:#A31515;">&quot;&lt;span class=\&quot;date\&quot;&gt;{post.Date}&lt;/span&gt;&quot;</span>;
            <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> $<span style="color:#A31515;">&quot;&lt;span class=\&quot;category\&quot;&gt;{HtmlEncode(post.Category)}&lt;/span&gt;&quot;</span>;
        <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> <span style="color:#A31515;">&quot;&lt;/div&gt;&quot;</span>;
    }

    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; PostsList(IEnumerable&lt;PostData&gt; posts)
    {
        <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> <span style="color:#A31515;">&quot;&lt;div class=\&quot;posts\&quot;&gt;&quot;</span>;

        <span style="color:#0000FF;">foreach</span> (<span style="color:#0000FF;">var</span> post <span style="color:#0000FF;">in</span> posts)
        {
            <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> <span style="color:#A31515;">&quot;&lt;div class=\&quot;post\&quot;&gt;&quot;</span>;
                <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> Include(PostHeader, post);
            <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> <span style="color:#A31515;">&quot;&lt;/div&gt;&quot;</span>;
        }

        <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> <span style="color:#A31515;">&quot;&lt;/div&gt;&quot;</span>;
    }
}

</pre></code>
<p>We reuse the <code>PostHeader</code> template in both the <code>Post</code> and <code>PostsList</code> templates.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/poor-mans-template-engine-3.html</link>
		<guid>http://smack0007.github.io/blog/2018/poor-mans-template-engine-3.html</guid>
		<pubDate>Thu, 22 Mar 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Poor Man's Template Engine in C# Part 2]]></title>
		<description><![CDATA[<p>In our <a href="blog/2018/poor-mans-template-engine-1.html">last episode</a> we laid the groundwork for our
simple template engine. In this episode we'll introduce our first 2 helper functions:</p>
<pre><code class="language-c#">
<span style="color:#0000FF;">namespace</span> Pmte
{
    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">delegate</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; Template&lt;TData&gt;(TData data);

    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">class</span> TemplateExtensions
    {   
        <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">string</span> Render(<span style="color:#0000FF;">this</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; templateResult) =&gt; <span style="color:#0000FF;">string</span>.Join(Environment.NewLine, templateResult);

        <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">string</span> HtmlEncode(<span style="color:#0000FF;">string</span> input) =&gt; WebUtility.HtmlEncode(input);

        <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">string</span> If(<span style="color:#0000FF;">bool</span> condition, <span style="color:#0000FF;">string</span> trueString, <span style="color:#0000FF;">string</span> falseString = <span style="color:#0000FF;">null</span>) =&gt; condition ? trueString : falseString;
    }
}

</pre></code>
<p>The first helper function <code>HtmlEncode</code> is fairly self explanitory. Use it to encode a string so that it is valid html.</p>
<p><code>If</code> can be used inside an interpolated string to optionally include a string or include a different string depending on
if condition is true or false.</p>
<pre><code class="language-c#">
<span style="color:#0000FF;">using</span> <span style="color:#0000FF;">static</span> Pmte.TemplateExtensions;

<span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">class</span> Templates
{
    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; Path(<span style="color:#0000FF;">string</span>[] paths)
    {
        <span style="color:#0000FF;">string</span> output = <span style="color:#A31515;">&quot;&quot;</span>;

        <span style="color:#0000FF;">for</span> (<span style="color:#0000FF;">int</span> i = <span>0</span>; i &lt; paths.Length; i++)
            output += $<span style="color:#A31515;">&quot;{paths[i]}{If(i &lt; paths.Length - 1, HtmlEncode(&quot;</span> &gt;<span style="color:#A31515;">&quot;))}&quot;</span>;

        <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> output;
    }
}

</pre></code>
<p>Next time we'll talk about including templates inside of other templates.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/poor-mans-template-engine-2.html</link>
		<guid>http://smack0007.github.io/blog/2018/poor-mans-template-engine-2.html</guid>
		<pubDate>Wed, 14 Mar 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Poor Man's Template Engine in C# Part 1]]></title>
		<description><![CDATA[<p>If you're looking for a poor man's solution to a templating engine for .net and don't really need
the overhead a complete template engine brings with it, I've come up with the following solution:</p>
<pre><code class="language-c#">
<span style="color:#0000FF;">namespace</span> Pmte
{
    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">delegate</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; Template&lt;TData&gt;(TData data);

    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">class</span> TemplateExtensions
    {   
        <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">string</span> Render(<span style="color:#0000FF;">this</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; templateResult) =&gt; <span style="color:#0000FF;">string</span>.Join(Environment.NewLine, templateResult);
    }
}

</pre></code>
<p>We define a template as being any function that returns an <code>IEnumerable&lt;string&gt;</code>. We are going to build a functional style
template engine. TemplateExtensions will contain methods for working with templates and template results.</p>
<p>Implement a template like so:</p>
<pre><code class="language-c#">
<span style="color:#0000FF;">using</span> <span style="color:#0000FF;">static</span> Pmte.TemplateExtensions;

<span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> <span style="color:#0000FF;">class</span> Templates
{
    <span style="color:#0000FF;">public</span> <span style="color:#0000FF;">static</span> IEnumerable&lt;<span style="color:#0000FF;">string</span>&gt; PeopleList(IEnumerable&lt;Person&gt; people)
    {
        <span style="color:#0000FF;">foreach</span> (<span style="color:#0000FF;">var</span> person <span style="color:#0000FF;">in</span> people)
            <span style="color:#0000FF;">yield</span> <span style="color:#0000FF;">return</span> $<span style="color:#A31515;">&quot;{person.FirstName} {person.LastName}&quot;</span>;
    }
}

</pre></code>
<p>This can then be consumed with:</p>
<pre><code class="language-c#">
<span style="color:#0000FF;">var</span> people = <span style="color:#0000FF;">new</span> Person[]
{
    <span style="color:#0000FF;">new</span> Person() { FirstName = <span style="color:#A31515;">&quot;Stan&quot;</span>, LastName = <span style="color:#A31515;">&quot;Marsh&quot;</span> },
    <span style="color:#0000FF;">new</span> Person() { FirstName = <span style="color:#A31515;">&quot;Kyle&quot;</span>, LastName = <span style="color:#A31515;">&quot;Broflovski&quot;</span> },
    <span style="color:#0000FF;">new</span> Person() { FirstName = <span style="color:#A31515;">&quot;Kenny&quot;</span>, LastName = <span style="color:#A31515;">&quot;McCormick&quot;</span> },
    <span style="color:#0000FF;">new</span> Person() { FirstName = <span style="color:#A31515;">&quot;Eric&quot;</span>, LastName = <span style="color:#A31515;">&quot;Cartman&quot;</span> },
};

Console.WriteLine(Templates.PeopleList(people).Render());

</pre></code>
<p>In future episodes we will build more functions to make our template engine more powerful.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/poor-mans-template-engine-1.html</link>
		<guid>http://smack0007.github.io/blog/2018/poor-mans-template-engine-1.html</guid>
		<pubDate>Tue, 06 Mar 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Snowball V2.0]]></title>
		<description><![CDATA[<p>I haven't written anything new here in a very long time and a lot has happened since then. I started a new job at
<a href="https://www.beumergroup.com">BeumerGroup</a> this year and now work mostly in TypeScript writing an html5 spa app.</p>
<p>In my spare time I've decided to working on version 2.0 of my <a href="https://github.com/smack0007/Snowball">Snowball</a>,
my 2D game framework. I've been playing around with the idea for a while now. This version will be developed directly
for .net core and will be developed with cross platform capability in mind. The api will look similar but will have
some changes.</p>
<p>The old repo is still available on my <a href="https://github.com/smack0007/">github</a> at <a href="https://github.com/smack0007/Snowball_v1">https://github.com/smack0007/Snowball_v1</a>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/snowball-2.html</link>
		<guid>http://smack0007.github.io/blog/2018/snowball-2.html</guid>
		<pubDate>Fri, 23 Feb 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Using batch files as the task runner in Visual Studio Code]]></title>
		<description><![CDATA[<p><a href="https://code.visualstudio.com/">Visual Studio Code</a> allows you specify tasks which can be in a task runner. Most examples
I've seen show how to integrate with Javascript task runners such as Gulp. There is no reason why you can't simpley use
batch files though.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2015/using-batch-files-as-task-runner-vs-code.html</link>
		<guid>http://smack0007.github.io/blog/2015/using-batch-files-as-task-runner-vs-code.html</guid>
		<pubDate>Thu, 09 Jul 2015 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[LINQ calls IEqualityComparer<T>.GetHashCode() before Equals()]]></title>
		<description><![CDATA[<p>This is a problem that has bitten me more than a few times so I thought it was about time to write a blog post about it. It's one of those problems
that makes you scratch your head for a bit and then the light bulb goes on and you remember you've solved this one before. It occurs whenever you
use a LINQ extension method which takes an instance of IEqualityComaparer<T>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2014/linq-calls-iequalitycomparer-gethashcode-before-equals.html</link>
		<guid>http://smack0007.github.io/blog/2014/linq-calls-iequalitycomparer-gethashcode-before-equals.html</guid>
		<pubDate>Mon, 24 Nov 2014 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[My Experience with OpenGL vs Direct3D]]></title>
		<description><![CDATA[<p>I've struggled a lot with myself over whether I should use OpenGL or Direct3D. There is no blanket answer to this question that anyone can tell you.
Both APIs have a very different feel and which one you prefer can only be decided on your own.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2014/my-experience-with-opengl-vs-direct3d.html</link>
		<guid>http://smack0007.github.io/blog/2014/my-experience-with-opengl-vs-direct3d.html</guid>
		<pubDate>Tue, 18 Nov 2014 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Code from when I was young and stupid and needed the money]]></title>
		<description><![CDATA[<p>We have had 2 interns at work for the past few weeks and one of the tasks we gave them was to implement <a href="http://en.wikipedia.org/wiki/Quick_sort">Quicksort</a>.
This got me to thinking about my youth and some of the code I wrote back then. I've decided to post it.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2014/code-from-when-i-was-young-and-stupid.html</link>
		<guid>http://smack0007.github.io/blog/2014/code-from-when-i-was-young-and-stupid.html</guid>
		<pubDate>Wed, 18 Jun 2014 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Adding assembly references in Roslyn]]></title>
		<description><![CDATA[<p>In the Roslyn preview that was released at Build 2014 the way references to global assmeblies are added was changed. Before the preview I could use code like this:</p>
<pre><code class="language-csharp">
<span style="color:#0000FF;">var</span> compilation = Compilation.Create(assemblyName, <span style="color:#0000FF;">new</span> CompilationOptions(OutputKind.DynamicallyLinkedLibrary))
	.AddReferences(MetadataReference.CreateAssemblyReference(<span style="color:#A31515;">&quot;mscorlib&quot;</span>))
	.AddReferences(MetadataReference.CreateAssemblyReference(<span style="color:#A31515;">&quot;System&quot;</span>))
	.AddReferences(MetadataReference.CreateAssemblyReference(<span style="color:#A31515;">&quot;System.Core&quot;</span>))
	.AddReferences(<span style="color:#0000FF;">new</span> MetadataFileReference(<span style="color:#0000FF;">this</span>.GetType().Assembly.Location))
	.AddSyntaxTrees(syntaxTree);

</pre></code>
<p>The static factory method &quot;MetadataReference.CreateAssemblyReference&quot; added a reference to global assemblies such as &quot;mscorlib.dll&quot; or &quot;System.dll&quot;. In the Roslyn preview,
the same be achieved like so:</p>
<pre><code class="language-csharp">
<span style="color:#0000FF;">var</span> assemblyPath = Path.GetDirectoryName(<span style="color:#0000FF;">typeof</span>(<span style="color:#0000FF;">object</span>).Assembly.Location);

<span style="color:#0000FF;">var</span> compilation = CSharpCompilation.Create(assemblyName)
	.WithOptions(<span style="color:#0000FF;">new</span> CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
	.AddReferences(<span style="color:#0000FF;">new</span> MetadataFileReference(Path.Combine(assemblyPath, <span style="color:#A31515;">&quot;mscorlib.dll&quot;</span>)))
	.AddReferences(<span style="color:#0000FF;">new</span> MetadataFileReference(Path.Combine(assemblyPath, <span style="color:#A31515;">&quot;System.dll&quot;</span>)))
	.AddReferences(<span style="color:#0000FF;">new</span> MetadataFileReference(Path.Combine(assemblyPath, <span style="color:#A31515;">&quot;System.Core.dll&quot;</span>)))
	.AddReferences(<span style="color:#0000FF;">new</span> MetadataFileReference(Assembly.GetEntryAssembly().Location))
	.AddSyntaxTrees(syntaxTree);

</pre></code>
]]></description>
		<link>http://smack0007.github.io/blog/2014/adding-assembly-references-in-roslyn.html</link>
		<guid>http://smack0007.github.io/blog/2014/adding-assembly-references-in-roslyn.html</guid>
		<pubDate>Tue, 15 Apr 2014 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[All the cool kids are static]]></title>
		<description><![CDATA[<p>Seems like all the cool kids these days have converted their websites to completely static ones. I'm looking at you <a href="http://haacked.com">Mr. Haacked</a>. I thought this was a pretty cool idea and a chance
to really refresh my website so I decided to take a stab at it. It's currently a work in progress.</p>
<p>I ended up writing my own tool I call <a href="http://github.com/smack0007/Gatsby">Gatsby</a> to do it. I also set up the whole deploy process myself involving pushing to <a href="http://github.com/smack0007/zacharysnow.net">Github</a>
which then informs my website to pull from the Github repository. Hopefully that will be a blog post in the not too distance future.</p>
<p>Sorry for any inconvenience.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2014/all-the-cool-kids-are-static.html</link>
		<guid>http://smack0007.github.io/blog/2014/all-the-cool-kids-are-static.html</guid>
		<pubDate>Sun, 09 Mar 2014 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Using Component Glue to build your object graphs automatically]]></title>
		<description><![CDATA[<p>Component Glue is an IoC container and you use it of course to wire up your object graphs for you. Component Glue can also build your object graphs for you automatically if there are no interfaces involved. Take this example:</p>
<script src="https://gist.github.com/smack0007/6091538.js"></script>
<p>In After.cs, you can see that Component Glue is able to build the entire object graph for us. This will include all future dependencies as well so long as interfaces don't come into play. Should an interface be needed, you can just bind that single component.</p>
<p>This is a very powerful thing. If one component needs to take on a dependency, just ask for it in the constructor and Component Glue will handle it for you.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2013/using-component-glue-to-build-your-object-graphs-automatically.html</link>
		<guid>http://smack0007.github.io/blog/2013/using-component-glue-to-build-your-object-graphs-automatically.html</guid>
		<pubDate>Fri, 26 Jul 2013 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Component Glue v1.0]]></title>
		<description><![CDATA[<p>I finally brought Component Glue up to a state where I felt like the product was finished. You can get it via NuGet:</p>
<div class="nuget-badge">
`PM&gt; Install-Package ComponentGlue`
</div>
<p>or you can get the source from <a href="https://github.com/smack0007/ComponentGlue">GitHub</a>. The documentation is definitely sparse I know but I recommend taking a look at the unit tests to get a feel for what you can do with Component Glue.</p>
<p>Credit for the NuGet CSS <a href="http://www.arunrana.net/2012/01/design-of-nuget-package-installation.html">here</a>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2013/component-glue-v1-0.html</link>
		<guid>http://smack0007.github.io/blog/2013/component-glue-v1-0.html</guid>
		<pubDate>Tue, 11 Jun 2013 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[GLDotNet Version 0.6.0]]></title>
		<description><![CDATA[<p>I just released GLDotNet Version 0.6.0.</p>
<h2>Changelog:</h2>
<ul>
<li>**GLDotNet.Toolkit**: Assembly containing simple app framework.</li>
<li>**GLDotNet.Objects**: Assembly containing higher level objects such as Texture2D and VertexBuffer.</li>
<li>More overloads added to GLContext class.</li>
<li>byte and sbyte are now mapped correctly in generated code.</li>
<li>Fixed the naming of some functions so as not to include type notation, i.e. Color4u.</li>
<li>Decreased the number of enum values output.</li>
</ul>
]]></description>
		<link>http://smack0007.github.io/blog/2013/gldotnet-version-0-6-0.html</link>
		<guid>http://smack0007.github.io/blog/2013/gldotnet-version-0-6-0.html</guid>
		<pubDate>Tue, 19 Feb 2013 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Introducing GLDotNet]]></title>
		<description><![CDATA[<p>Today I released a project I've been playing around with for a year or so on Codeplex. It's called <a href="https://gldotnet.codeplex.com/">GLDotNet</a>. From the project description:</p>
<p><em>C# wrapper for OpenGL. Partially generated from the OpenGL spec and partially written by hand, the aim is to have a flexible and native feeling C# binding.</em></p>
<p>I have generated functions from the OpenGL spec excluding 1 or 2 but unfortunately of the generated code is untested. There is a demo project included in the source code. The Github repository is located here: <a href="https://github.com/smack0007/GLDotNet">https://github.com/smack0007/GLDotNet</a></p>
]]></description>
		<link>http://smack0007.github.io/blog/2013/introducing-gldotnet.html</link>
		<guid>http://smack0007.github.io/blog/2013/introducing-gldotnet.html</guid>
		<pubDate>Wed, 02 Jan 2013 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[HTTP Status Codes as Telephone Calls]]></title>
		<description><![CDATA[<p>I had a funny idea to describe HTTP Status Codes as telephone conversations so I thought I'd write it in a blog post.</p>
<dl>
<dt>301</dt>
<dd>She's not here right now but she'll be back later.</dd>
<dt>302</dt>
<dd>She doesn't live here anymore, she now lives somewhere else.</dd>
<dt>304</dt>
<dd>He hesn't changed a bit.</dd>
<dt>401</dt>
<dd>I can't allow you to speak to him.</dd>
<dt>402</dt>
<dd>$1.99 for the first minute...</dd>
<dt>404</dt>
<dd>No one by that name lives here.</dd>
<dt>500</dt>
<dd>It's not you, it's me.</dd>
<dt>503</dt>
<dd>I can't deal with this anymore.</dd>
</dl>
]]></description>
		<link>http://smack0007.github.io/blog/2012/http-status-codes-as-telephone-calls.html</link>
		<guid>http://smack0007.github.io/blog/2012/http-status-codes-as-telephone-calls.html</guid>
		<pubDate>Tue, 18 Dec 2012 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Snowball is now modular]]></title>
		<description><![CDATA[<p>The version of Snowball currently on GitHub under the &quot;develop&quot; branch has been split into multiple projects. There is now an assembly for each major piece of Snowball, such as Graphics, Input, Sound. Although this means having to reference more assemblies, the amount of code your project depends on is now smaller. This also makes code maintenance a bit easier as it's more clear now what parts of the library depend on other parts of the library.</p>
<p>The parts of the library which really make up a Game Framework has also been split out into their own library. This allows for using Snowball as a just a simple set of libraries or a full blown game framework, depending on what your situation calls for.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2012/snowball-is-now-modular.html</link>
		<guid>http://smack0007.github.io/blog/2012/snowball-is-now-modular.html</guid>
		<pubDate>Tue, 06 Nov 2012 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Using Themes in Visual Studio Express for Windows Desktop]]></title>
		<description><![CDATA[<p>I just want to post some information that took me while to find. Check out the original article <a href="http://alinconstantin.blogspot.de/2012/09/using-color-themes-with-visual-studio.html">here</a> with pictures and more information.</p>
<blockquote>
1) First, download the zip file http://www.alinconstantin.net/download/VS2012Themes.zip – it contains the 7 pkgdef files defining the colors of the default themes from Matt’s extension.
<ol start="2">
<li>
<p>Now, create a folder under &quot;%ProgramFiles%\Microsoft Visual Studio 11.0\Common7\IDE\WDExpressExtensions”, and lets name it “Themes”. Unpack the zip file in that folder.</p>
</li>
<li>
<p>Open a ‘Developer Command Prompt for VS2012” window. In the command line, type “wdexpress.exe /updateconfiguration”. This will make Visual Studio to read the pkgdef files on next restart, and import the color themes into registry.</p>
</li>
<li>
<p>Launch Visual Studio Express, and now you should be able to see the new themes and switch them in Tools/Options dialog, Environment/General tab</p>
</li>
</ol>
</blockquote>
<p><a href="http://alinconstantin.blogspot.de/2012/09/using-color-themes-with-visual-studio.html">Source</a></p>
]]></description>
		<link>http://smack0007.github.io/blog/2012/using-themes-in-visual-studio-express-for-windows-desktop.html</link>
		<guid>http://smack0007.github.io/blog/2012/using-themes-in-visual-studio-express-for-windows-desktop.html</guid>
		<pubDate>Sat, 15 Sep 2012 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[ID3DXEffect::OnLostDevice()]]></title>
		<description><![CDATA[<p>I fixed a bug yesterday in Snowball related to a lost graphics device. I noticed that when I would use CTRL + ALT + DELETE, my apps were crashing. Turned out it was due to not recovering properly from a lost device.</p>
<p>The root of the problem was that I needed to call the ID3DXEffect::OnLostDevice() method when the device was being lost. This allows the effect to recover from the lost device. I've made the Effect class in Snowball now do this automatically.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2012/id3dxeffectonlostdevice.html</link>
		<guid>http://smack0007.github.io/blog/2012/id3dxeffectonlostdevice.html</guid>
		<pubDate>Fri, 20 Jul 2012 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Snowball: Now based on shaders]]></title>
		<description><![CDATA[<p>I've now merged the &quot;Shaders&quot; branch back into the &quot;master&quot; branch. All rendering is now based on shaders and no longer on the fixed function pipeline.</p>
<p>The function of the Renderer class was essentially been reduced to pushing data to the GPU and therefore I decided to rename the class to GraphicsBatch. The Begin() overload which would allow you to specify RendererSettings has been removed and been replaced with an overload which allows you to specify an Effect file to use. Also, the DrawLine() method has been removed, although vertical and horizontal lines can still be drawn using the DrawFilledRectangle() method. Better line drawing should be possible through shaders and I hope to eventually make a sample which provides an example.</p>
<p>I've added a sample (pictured above) which demonstrates using a custom shader. By default, GraphicsBatch uses a BasicEffect class which is basically the old way of rendering implemented in a shader.</p>
<p>In order for shaders to work properly when using GraphicsBatch, the GraphicsBatch class must pass a few parameters to the shader. At the moment, this only includes a transform matrix but may include more parameters in the future. The GraphicsBatchEffectWrapper can be used to wrap custom effects which you write in order to work with GraphicsBatch correctly. GraphicsBatchEffectWrapper will pass the parameters to your shader by following a standard naming convention. For example, the transform matrix is passed to your shader through a parameter named &quot;TransformMatrix&quot;.  You can also write you own class which implements IGraphicsBatchEffect. See the sample for an example of using the wrapper class.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2012/snowball-now-based-on-shaders.html</link>
		<guid>http://smack0007.github.io/blog/2012/snowball-now-based-on-shaders.html</guid>
		<pubDate>Tue, 26 Jun 2012 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Snowball: \Shaders\ in progress]]></title>
		<description><![CDATA[<p>It's been a long couple of months. I'm in the middle of switching jobs, been on vacation a bit, and have been playing around with OpenGL a bit to get a feel for how that API works compared to Direct3D. As of yesterday I started working on implementing shaders in Snowball.</p>
<p>In order to implement shaders or Effect(s), there may have to be a few changes to the API / interface of the Renderer class. Nothing significant I don't think but mainly changes to the Begin() method overloads. Today I pushed the branch which contains my initial implementation.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2012/snowball-shaders-in-progress.html</link>
		<guid>http://smack0007.github.io/blog/2012/snowball-shaders-in-progress.html</guid>
		<pubDate>Fri, 22 Jun 2012 00:00:00 GMT</pubDate>
	</item>
	</channel>
</rss>

